
# HG changeset patch
# User Mitchell Hentges <mhentges@mozilla.com>
# Date 1649248427 0
# Node ID 18d2da487a8d6bf0e15bb06b1e243685394f34ab
# Parent  926e2d800cbedb824c7b016f9318b82c39b6015d
Bug 1762050: Use original topobjdir for PGO build virtualenv r=glandium

The PGO-specific objdir is meant for the PGO build artifacts.
The python virtualenvs just exist for the host, so there's no need to
scope them. Besides, the existing virtualenv infrastructure doesn't know
how to distinguish between "main 'build' site" and "PGO 'build' site",
which is why it raised this "out-of-date" error.

Differential Revision: https://phabricator.services.mozilla.com/D142373

diff --git a/python/mozbuild/mozbuild/build_commands.py b/python/mozbuild/mozbuild/build_commands.py
--- a/python/mozbuild/mozbuild/build_commands.py
+++ b/python/mozbuild/mozbuild/build_commands.py
@@ -180,16 +180,17 @@ def build(
             what=what,
             jobs=jobs,
             job_size=job_size,
             directory=directory,
             verbose=verbose,
             keep_going=keep_going,
             mach_context=command_context._mach_context,
             append_env=append_env,
+            virtualenv_topobjdir=orig_topobjdir,
         )
         if status != 0:
             return status
 
         # Packaging the instrumented build is required to get the jarlog
         # data.
         status = instr._run_make(
             directory=".",
@@ -203,17 +204,17 @@ def build(
 
         pgo_env = os.environ.copy()
         if instr.config_environment.substs.get("CC_TYPE") in ("clang", "clang-cl"):
             pgo_env["LLVM_PROFDATA"] = instr.config_environment.substs.get(
                 "LLVM_PROFDATA"
             )
         pgo_env["JARLOG_FILE"] = mozpath.join(orig_topobjdir, "jarlog/en-US.log")
         pgo_cmd = [
-            instr.virtualenv_manager.python_path,
+            command_context.virtualenv_manager.python_path,
             mozpath.join(command_context.topsrcdir, "build/pgo/profileserver.py"),
         ]
         subprocess.check_call(pgo_cmd, cwd=instr.topobjdir, env=pgo_env)
 
         # Set the default build to MOZ_PROFILE_USE
         append_env = {"MOZ_PROFILE_USE": "1"}
 
     driver = command_context._spawn(BuildDriver)
diff --git a/python/mozbuild/mozbuild/controller/building.py b/python/mozbuild/mozbuild/controller/building.py
--- a/python/mozbuild/mozbuild/controller/building.py
+++ b/python/mozbuild/mozbuild/controller/building.py
@@ -1217,16 +1217,17 @@ class BuildDriver(MozbuildObject):
         what=None,
         jobs=0,
         job_size=0,
         directory=None,
         verbose=False,
         keep_going=False,
         mach_context=None,
         append_env=None,
+        virtualenv_topobjdir=None,
     ):
         """Invoke the build backend.
 
         ``what`` defines the thing to build. If not defined, the default
         target is used.
         """
         self.metrics = metrics
         self.mach_context = mach_context
@@ -1294,16 +1295,17 @@ class BuildDriver(MozbuildObject):
                 if config is None:
                     print(" Config object not found by mach.")
 
                 config_rc = self.configure(
                     metrics,
                     buildstatus_messages=True,
                     line_handler=output.on_line,
                     append_env=append_env,
+                    virtualenv_topobjdir=virtualenv_topobjdir,
                 )
 
                 if config_rc != 0:
                     return config_rc
 
                 config = self.reload_config_environment()
 
             # Collect glean metrics
@@ -1632,16 +1634,17 @@ class BuildDriver(MozbuildObject):
 
     def configure(
         self,
         metrics,
         options=None,
         buildstatus_messages=False,
         line_handler=None,
         append_env=None,
+        virtualenv_topobjdir=None,
     ):
         # Disable indexing in objdir because it is not necessary and can slow
         # down builds.
         self.metrics = metrics
         mkdir(self.topobjdir, not_indexed=True)
         self._write_mozconfig_json()
 
         def on_line(line):
@@ -1655,21 +1658,22 @@ class BuildDriver(MozbuildObject):
         # from the mozconfig would spill into the configure environment, so
         # add that for backwards compatibility.
         for line in self.mozconfig["make_extra"] or []:
             if line.startswith("export "):
                 k, eq, v = line[len("export ") :].partition("=")
                 if eq == "=":
                     append_env[k] = v
 
+        virtualenv_topobjdir = virtualenv_topobjdir or self.topobjdir
         build_site = CommandSiteManager.from_environment(
             self.topsrcdir,
             lambda: get_state_dir(specific_to_topsrcdir=True, topsrcdir=self.topsrcdir),
             "build",
-            os.path.join(self.topobjdir, "_virtualenvs"),
+            os.path.join(virtualenv_topobjdir, "_virtualenvs"),
         )
         build_site.ensure()
 
         command = [build_site.python_path, os.path.join(self.topsrcdir, "configure.py")]
         if options:
             command.extend(options)
 
         if buildstatus_messages:

